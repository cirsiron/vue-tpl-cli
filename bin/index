const { prompt } = require('inquirer');
const program = require('commander');
const chalk = require('chalk');
const download = require('download-git-repo');
const ora = require('ora');
const path = require('path');

const { init, add, update, del} = require('../commander');
const { readFile, writeFile } = require('../common');

const tplList = require(`${__dirname}/../tpl`)
const tplLists = Object.keys(tplList) || [];
const option =  program.parse(process.argv).args[0];
const defaultName = (option && typeof option === 'string') ? option : 'vue-project';

const questions = [
    {
        type: 'input',
        name: 'name',
        message: 'Project Name',
        default: defaultName,
        filters(val) {
            return val.trim()
        },
        validate(val) {
            const validate = (val.trim().split(' ')).length === 1;
            return validate || 'Project Name is not allowed to have space';
        }
    },
    {
        type: 'list',
        name: 'template',
        message: 'choice project template',
        choices: tplLists,
        default: tplLists[0]
    },
    {
        type: 'input',
        name: 'description',
        message: 'Project Description',
        default: 'A Vue Project'
    },
    {
        type: 'input',
        name: 'author',
        message: 'Author Name',
        default: 'Project author'
    }
]

module.exports = prompt(questions)
    .then(({name, template, description, author}) => {
        const projectName = name;
        const tplName = template;
        const gitRepo = tplList[tplName].url;
        const gitBranch = tplList[tplName].branch;

        const spiner = ora('Downloading...');
        spiner.start();
        
        download(`${gitRepo}${gitBranch}`, `./${projectName}`, (err) => {
            if(err) {
                console.log(chalk.red(err))
                process.exit();
            }
            const packageUrl = `./${projectName}/package.json`
            readFile(packageUrl).then(function(data) {
                const packageJson = JSON.parse(data);
                packageJson.name = projectName;
                packageJson.description = description;
                packageJson.author = author;
                
                const updatedJson = JSON.stringify(packageJson, null, 2);
                return updatedJson;
            }, function(err) {
                console.log(chalk.red(err))
            }).then(function(res) {
                writeFile(packageUrl, res).then(function(tip) {
                    spiner.stop(); 
                    console.log(chalk.green('project init successfully!'))
                    console.log(`
                        ${chalk.yellow(`cd ${name}`)}
                        ${chalk.yellow('npm install')}
                        ${chalk.yellow('npm run dev')}
                    `);
                }, function(err) {
                    spiner.stop();
                    console.log(chalk.red(err))
                })
            })
        })


        console.log(name, template, description, author);
    })
